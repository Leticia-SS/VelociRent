package com.velocirent.telegram;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class Tratamentos {
    public void tratarMatricula(VelociBot bot, Long chatId, String mensagem,
                                Map<Long, String> estadosUsuarios, Map<Long, String> perfisUsuarios) {
        if (mensagem.equals("123")) {
            perfisUsuarios.put(chatId, "ALUNO");
            estadosUsuarios.put(chatId, "MENU_ALUNO");
            String userName = "Argos";
            PerfilUsuario.mostrarMenuAluno(bot, chatId, userName);
        } else if (mensagem.equals("456")) {
            perfisUsuarios.put(chatId, "PROFESSOR");
            estadosUsuarios.put(chatId, "MENU_PROFESSOR");
            String userName = "Argos";
            PerfilUsuario.mostrarMenuProfessor(bot, chatId, userName);
        } else if (mensagem.equals("789")) {
            perfisUsuarios.put(chatId, "MECANICO");
            estadosUsuarios.put(chatId, "MENU_MECANICO");
            String userName = "Argos";
            PerfilUsuario.mostrarMenuMecanico(bot, chatId, userName);
        } else if (mensagem.equals("1011")) {
            perfisUsuarios.put(chatId, "ADMIN");
            estadosUsuarios.put(chatId, "MENU_ADMIN");
            String userName = "Argos";
            PerfilUsuario.mostrarMenuAdmin(bot, chatId, userName);
        } else {
            bot.enviarMensagem(chatId, "‚ùå Matr√≠cula inv√°lida. Tente novamente:");
        }
    }

    public void tratarMenuAluno(VelociBot bot, Long chatId, String mensagem,
                                Map<Long, String> bicicletasAlugadas, Map<Long, String> estadosUsuarios) {
        switch (mensagem) {
            case "üö≤ Alugar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ö†Ô∏è Voc√™ j√° tem uma bicicleta alugada: " + bicicletasAlugadas.get(chatId));
                } else {
                    bicicletasAlugadas.put(chatId, "Bike#A" + new Random().nextInt(100));
                    bot.enviarMensagem(chatId, "Checkout abrindo...");
                    String urlPayment = "https://www.asaas.com/i/2j7k4fyohcgmc505";
                    bot.enviarMensagem(chatId, urlPayment);
//                  bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Voc√™ alugou a bicicleta: " + bicicletasAlugadas.get(chatId));
                }
                break;

            case "üìú Ver hist√≥rico":
                bot.enviarMensagemComOpcaoMenu(chatId, "üìÖ Hist√≥rico de alugu√©is:\n" +
                        "1. Bike#A23 - 10/05/2023 14:30\n" +
                        "2. Bike#A45 - 05/05/2023 09:15");
                break;

            case "üîÑ Retornar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    estadosUsuarios.put(chatId, "AGUARDANDO_RETORNO");
                    bot.enviarMensagem(chatId, "Por favor, informe o estado da bicicleta " +
                            bicicletasAlugadas.get(chatId) + " (√≥timo, bom, regular, ruim):");
                    List<String> opcoes = Arrays.asList(
                            "√≥timo",
                            "bom",
                            "regular",
                            "ruim"
                    );
                    bot.enviarMensagemComBotoes(chatId, "Avaliar bike como:", opcoes);
                } else {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ùå Voc√™ n√£o tem nenhuma bicicleta alugada no momento.");
                }
                break;

            case "‚ùå Encerrar atendimento":
                bot.enviarMensagem(chatId, "üëã Atendimento encerrado. Obrigado por usar a VelociRent!");
                estadosUsuarios.put(chatId, "INICIO");
                break;

            default:
                bot.enviarMensagemComOpcaoMenu(chatId, "Op√ß√£o inv√°lida. Por favor, selecione uma op√ß√£o do menu.");
        }
    }

    public void tratarMenuProfessor(VelociBot bot, Long chatId, String mensagem,
                                    Map<Long, String> bicicletasAlugadas, Map<Long, String> estadosUsuarios) {
        switch (mensagem) {
            case "üö≤ Alugar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ö†Ô∏è Voc√™ j√° tem uma bicicleta alugada: " + bicicletasAlugadas.get(chatId));
                } else {
                    bicicletasAlugadas.put(chatId, "Bike#A" + new Random().nextInt(100));
                    bot.enviarMensagem(chatId, "Checkout abrindo...");
                    String urlPayment = "https://www.asaas.com/i/2j7k4fyohcgmc505";
                    bot.enviarMensagem(chatId, urlPayment);
//                  bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Voc√™ alugou a bicicleta: " + bicicletasAlugadas.get(chatId));
                }
                break;

            case "üìú Ver hist√≥rico":
                bot.enviarMensagemComOpcaoMenu(chatId, "üìÖ Hist√≥rico de alugu√©is:\n" +
                        "1. Bike#A23 - 10/05/2023 14:30\n" +
                        "2. Bike#A45 - 05/05/2023 09:15");
                break;

            case "üîÑ Retornar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    estadosUsuarios.put(chatId, "AGUARDANDO_RETORNO");
                    bot.enviarMensagem(chatId, "Por favor, informe o estado da bicicleta " +
                            bicicletasAlugadas.get(chatId) + " (√≥timo, bom, regular, ruim):");
                    List<String> opcoes = Arrays.asList(
                            "√≥timo",
                            "bom",
                            "regular",
                            "ruim"
                    );
                    bot.enviarMensagemComBotoes(chatId, "Avaliar bike como:", opcoes);
                } else {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ùå Voc√™ n√£o tem nenhuma bicicleta alugada no momento.");
                }
                break;

            case "‚ùå Encerrar atendimento":
                bot.enviarMensagem(chatId, "üëã Atendimento encerrado. Obrigado por usar a VelociRent!");
                estadosUsuarios.put(chatId, "INICIO");
                break;

            default:
                bot.enviarMensagemComOpcaoMenu(chatId, "Op√ß√£o inv√°lida. Por favor, selecione uma op√ß√£o do menu.");
        }
    }

    public void tratarMenuMecanico(VelociBot bot, Long chatId, String mensagem,
                                   Map<Long, String> bicicletasAlugadas, Map<Long, String> estadosUsuarios) {
        switch (mensagem) {
            case "üîß Verificar/Editar status das bikes":
                bot.enviarMensagem(chatId, "üîß Status das bicicletas:\n" +
                        "1. Bike#A23 - Dispon√≠vel (bom estado)\n" +
                        "2. Bike#A45 - Em manuten√ß√£o\n" +
                        "3. Bike#A67 - Alugada\n" +
                        "Digite o n√∫mero da bike para editar status:");
                estadosUsuarios.put(chatId, "AGUARDANDO_EDICAO_STATUS");
                break;

            case "üö≤ Alugar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ö†Ô∏è Voc√™ j√° tem uma bicicleta alugada: " + bicicletasAlugadas.get(chatId));
                } else {
                    bicicletasAlugadas.put(chatId, "Bike#A" + new Random().nextInt(100));
                    bot.enviarMensagem(chatId, "Checkout abrindo...");
                    String urlPayment = "https://www.asaas.com/i/2j7k4fyohcgmc505";
                    bot.enviarMensagem(chatId, urlPayment);
//                  bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Voc√™ alugou a bicicleta: " + bicicletasAlugadas.get(chatId));
                }
                break;

            case "üìú Ver hist√≥rico":
                bot.enviarMensagemComOpcaoMenu(chatId, "üìÖ Hist√≥rico de manuten√ß√µes:\n" +
                        "1. Bike#A23 - Pneu furado - 08/05/2023\n" +
                        "2. Bike#A45 - Freios ajustados - 05/05/2023");
                break;
            case "üîÑ Retornar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    estadosUsuarios.put(chatId, "AGUARDANDO_RETORNO");
                    bot.enviarMensagem(chatId, "Por favor, informe o estado da bicicleta " +
                            bicicletasAlugadas.get(chatId) + " (√≥timo, bom, regular, ruim):");
                    List<String> opcoes = Arrays.asList(
                            "√≥timo",
                            "bom",
                            "regular",
                            "ruim"
                    );
                    bot.enviarMensagemComBotoes(chatId, "Avaliar bike como:", opcoes);
                } else {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ùå Voc√™ n√£o tem nenhuma bicicleta alugada no momento.");
                }
                break;

            case "‚ùå Encerrar atendimento":
                bot.enviarMensagem(chatId, "üëã Atendimento encerrado. Obrigado por usar a VelociRent!");
                estadosUsuarios.put(chatId, "INICIO");
                break;

            default:
                bot.enviarMensagemComOpcaoMenu(chatId, "Op√ß√£o inv√°lida. Por favor, selecione uma op√ß√£o do menu.");
        }
    }

    public void tratarMenuAdmin(VelociBot bot, Long chatId, String mensagem,
                                Map<Long, String> bicicletasAlugadas, Map<Long, String> estadosUsuarios) {
        switch (mensagem) {
            case "üîç Ver status das bikes":
                bot.enviarMensagemComOpcaoMenu(chatId, "üö≤ Status de todas as bicicletas:\n" +
                        "1. Bike#A23 - Alugada por Argos\n" +
                        "2. Bike#A45 - Dispon√≠vel\n" +
                        "3. Bike#A67 - Em manuten√ß√£o");
                break;

            case "üìë Ver hist√≥rico de todos":
                bot.enviarMensagemComOpcaoMenu(chatId, "üìä Hist√≥rico completo:\n" +
                        "1. Argos - Bike#A23 - 10/05/2023\n" +
                        "2. Lara - Bike#A45 - 09/05/2023\n" +
                        "3. Megan - Bike#M12 - 08/05/2023");
                break;

            case "üö≤ Alugar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ö†Ô∏è Voc√™ j√° tem uma bicicleta alugada: " + bicicletasAlugadas.get(chatId));
                } else {
                    bicicletasAlugadas.put(chatId, "Bike#A" + new Random().nextInt(100));
                    bot.enviarMensagem(chatId, "Checkout abrindo...");
                    String urlPayment = "https://www.asaas.com/i/2j7k4fyohcgmc505";
                    bot.enviarMensagem(chatId, urlPayment);
//                  bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Voc√™ alugou a bicicleta: " + bicicletasAlugadas.get(chatId));
                }
                break;

            case "üìú Ver meu hist√≥rico":
                bot.enviarMensagemComOpcaoMenu(chatId, "üìÖ Seu hist√≥rico:\n" +
                        "1. Bike#AD12 - 10/05/2023\n" +
                        "2. Bike#AD34 - 05/05/2023");
                break;

            case "üîÑ Retornar bicicleta":
                if (bicicletasAlugadas.containsKey(chatId)) {
                    estadosUsuarios.put(chatId, "AGUARDANDO_RETORNO");
                    bot.enviarMensagem(chatId, "Por favor, informe o estado da bicicleta " +
                            bicicletasAlugadas.get(chatId) + " (√≥timo, bom, regular, ruim):");
                    List<String> opcoes = Arrays.asList(
                            "√≥timo",
                            "bom",
                            "regular",
                            "ruim"
                    );
                    bot.enviarMensagemComBotoes(chatId, "Avaliar bike como:", opcoes);
                } else {
                    bot.enviarMensagemComOpcaoMenu(chatId, "‚ùå Voc√™ n√£o tem nenhuma bicicleta alugada no momento.");
                }
                break;

            case "‚ùå Encerrar atendimento":
                bot.enviarMensagem(chatId, "üëã Atendimento encerrado. Obrigado por usar a VelociRent!");
                estadosUsuarios.put(chatId, "INICIO");
                break;

            default:
                bot.enviarMensagemComOpcaoMenu(chatId, "Op√ß√£o inv√°lida. Por favor, selecione uma op√ß√£o do menu.");
        }
    }

    public void tratarRetornoBicicleta(VelociBot bot, Long chatId, String mensagem,
                                       Map<Long, String> bicicletasAlugadas, Map<Long, String> perfisUsuarios,
                                       Map<Long, String> estadosUsuarios) {
        String perfil = perfisUsuarios.get(chatId);
        String bike = bicicletasAlugadas.get(chatId);

        if (mensagem.matches("√≥timo|bom|regular|ruim".toLowerCase())) {
            bicicletasAlugadas.remove(chatId);
            bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Bicicleta " + bike + " retornada com estado: " + mensagem +
                    "\nObrigado por utilizar nossos servi√ßos!");

            // Volta para o estado do menu apropriado
            estadosUsuarios.put(chatId, "MENU_" + perfil);
        } else {
            bot.enviarMensagem(chatId, "‚ùå Estado inv√°lido. Por favor, informe o estado da bicicleta " +
                    bike + " (√≥timo, bom, regular, ruim):");
        }
    }

    public void tratarEdicaoStatus(VelociBot bot, Long chatId, String mensagem, Map<Long, String> estadosUsuarios) {
        if (mensagem.matches("[123]")) {
            bot.enviarMensagemComOpcaoMenu(chatId, "‚úÖ Status da bicicleta #" + mensagem + " atualizado com sucesso!");
            estadosUsuarios.put(chatId, "MENU_MECANICO");
        } else {
            bot.enviarMensagem(chatId, "‚ùå N√∫mero inv√°lido. Por favor, digite 1, 2 ou 3:");
        }
    }
}
